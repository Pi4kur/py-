

len(),sum(),min(),max()

in / not in

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
del numbers[5] 
del numbers[2:7]    # удаляем элементы с 2 по 6 включительно

print(*numbers)
print(*numbers, sep='\n')

append() и extend()

split()

join() --> s = ' '.join(words)


Функция ord and chr

num1 = ord('A')
num2 = ord('B')
num3 = ord('a') 
print(num1, num2, num3)
65 66 97

chr1 = chr(65)
chr2 = chr(75)
chr3 = chr(110) 
print(chr1, chr2, chr3)
A K n


*** insert() ***

Метод insert() позволяет вставлять значение в список в заданной позиции. В него передается два аргумента:

index: индекс, задающий место вставки значения;
value: значение, которое требуется вставить.

* Значение, которое ранее находилось в заданной индексной позиции, и все элементы после него сдвигаются на одну позицию к концу списка.


*** index() ***

Метод index() возвращает индекс первого элемента, значение которого равняется переданному в метод значению. Таким образом, в метод передается один параметр:

value: значение, индекс которого требуется найти.

* Если элемент в списке не найден, то во время выполнения происходит ошибка.


*** remove() ***

Метод remove() удаляет первый элемент, значение которого равняется переданному в метод значению. В метод передается один параметр:

value: значение, которое требуется удалить.

Метод уменьшает размер списка на один элемент. Все элементы после удаленного элемента смещаются на одну позицию к началу списка. Если элемент в списке не найден, то во время выполнения происходит ошибка.


*** pop() ***

Метод pop() удаляет элемент по указанному индексу и возвращает его. В метод pop() передается один необязательный аргумент:

index: индекс элемента, который требуется удалить.

* Если индекс не указан, то метод удаляет и возвращает последний элемент списка. Если список пуст или указан индекс за пределами диапазона, то во время выполнения происходит ошибка.


*** count() ***

Метод count() возвращает количество элементов в списке, значения которых равны переданному в метод значению.

value: значение, количество элементов, равных которому,  нужно посчитать.

* Если значение в списке не найдено, то метод возвращает 0.


*** reverse() ***

Метод reverse() инвертирует порядок следования значений в списке, то есть меняет его на противоположный.

* Существует большая разница между вызовом метода names.reverse() и использованием среза names[::-1]. Метод reverse() меняет порядок элементов на обратный в текущем списке, а срез создает копию списка, в котором элементы следуют в обратном порядке.


*** clear() ***

Метод clear() удаляет все элементы из списка.


*** copy() ***

Метод copy() создает поверхностную копию списка.

Аналогичного результата можно достичь с помощью срезов или функции list():

names = ['Gvido', 'Roman' , 'Timur']
names_copy1 = list(names)             # создаем поверхностную копию с помощью функции list()
names_copy2 = names[:]                # создаем поверхностную копию с помощью среза от начала до конца


*** sort() ***

a.sort(reverse = True)

List comprehensive 

[0 for i in range(10)]			[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[i ** 2 for i in range(1, 8)]		[1, 4, 9, 16, 25, 36, 49]
[i * 10 for i in numbers]		[10, 140, 50, 90, 120]
[c * 2 for c in word]			['HH', 'ee', 'll', 'll', 'oo']
[m[0] for m in words]			['o', 't', 't', 'f', 'f', 's']
[i for i in numbers if i < 10]		[1, 5, 9]
[m[0] for m in words if len(m) == 3]	['o', 't', 's']

******** RANDOM **********

randint()

Функция randint() принимает два обязательных аргумента a и b и возвращает случайное целое число из отрезка [a;b].

randrange()

range(). Различие состоит в том, что функция randrange()
не возвращает саму последовательность чисел. Вместо этого она возвращает случайно выбранное число из последовательности чисел.

num = random.randrange(0, 101, 10)
0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100

random() - [0.0;1.0)

uniform() - [1.5;17.3]

from random import *

shuffle() - shuffle(list)

choice() 

Функция choice() принимает список (строку) в качестве обязательного аргумента и возвращает один случайный элемент из переданного списка (строки).

sample()

Функция sample() принимает два обязательных аргумента: список (строку) и количество случайных элементов, а возвращает список случайных элементов в указанном количестве.

BOOLEAN

Запомните: приоритет оператора not выше, чем у оператора and, приоритет которого, в свою очередь, выше, чем у оператора or.

Matrixen

Индексы i и j элементов на главной диагонали связаны соотношением i = j. Индексы i и j элементов на побочной диагонали связанны соотношением i + j + 1 = n (или  j = n - i - 1), где n — размерность матрицы

если элемент находится выше главной диагонали, то i < j, если ниже, i > j.
если элемент находится выше побочной диагонали, то i + j + 1 < n, если ниже, i + j + 1 > n.

def print_matrix(matrix, n, width=1):
    for r in range(n):
        for c in range(n):
            print(str(matrix[r][c]).ljust(width), end=' ')
        print()


def print_matrix(matrix, row, col, width=1):
    for r in range(row):
        for c in range(col):
            print(str(matrix[r][c]).ljust(width), end=' ')
        print()

n = int(input())
matrix = []
for i in range(n):
    temp = [int(num) for num in input().split()]
    matrix.append(temp)

n = 8
matrix = [[0]*n for _ in range(n)]    # создаем квадратную матрицу размером 8×8

for i in range(n):                     # заполняем главную диагональ единицами, а побочную двойками
    matrix[i][i] = 1
    matrix[i][n-i-1] = 2

###################
Особенности кортежей
Кортежи поддерживают те же операции, что и списки, за исключением изменяющих содержимое.

Кортежи поддерживают:

доступ к элементу по индексу (только для получения значений элементов);
методы, в частности index(), count();
встроенные функции, в частности len(), sum(), min() и max();
срезы;
оператор принадлежности in;
операторы конкатенации (+) и повторения (*).

!!! Кортежи не поддерживают такие методы, как append(), remove(), pop(), insert(), reverse(), sort(), так как они изменяют содержимое.

Тема урока: методы множеств

Методы union(), intersection(), difference(), symmetric_difference()

Методы update(), intersection_update(), difference_update(), symmetric_difference_update()

Операторы &, |, -, ^

Методы issuperset(), issubset(), isdisjoint()
Сравнение множеств (<, >, <=, >=)


Тема урока: словари в Python

